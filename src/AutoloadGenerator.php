<?php

namespace AlexeyKupershtokh\LazyApcClassLoader;

use Composer\Config;
use Composer\EventDispatcher\EventDispatcher;
use Composer\IO\IOInterface;
use Composer\Util\Filesystem;

class AutoloadGenerator
{
    /**
     * @var EventDispatcher
     */
    private $eventDispatcher;

    /**
     * @var IOInterface
     */
    private $io;

    public function __construct(EventDispatcher $eventDispatcher, IOInterface $io = null)
    {
        $this->eventDispatcher = $eventDispatcher;
        $this->io = $io;
    }

    public function replace(Config $config, $suffix = null)
    {
        $filesystem = new Filesystem();
        $filesystem->ensureDirectoryExists($config->get('vendor-dir'));
        $vendorPath = $filesystem->normalizePath(realpath($config->get('vendor-dir')));

        copy($vendorPath.'/autoload.php', $vendorPath.'/autoload-composer.php');

        if (!$suffix) {
            $suffix = $config->get('autoloader-suffix') ?: md5(uniqid('', true));
        }

        $autoloadFileContent = $this->getAutoloadFile($vendorPath, $suffix);
        file_put_contents($vendorPath.'/autoload.php', $autoloadFileContent);
    }

    /**
     * @param string $suffix
     * @return string
     */
    protected function getAutoloadFile($vendorPath, $suffix)
    {
        $suffixLiteral = var_export($suffix, true);
        $filesAutoload = $this->getFilesAutoload($vendorPath, $suffix);
        $lazyApcClassLoaderClass = file_get_contents(__DIR__.'/LazyApcClassLoader.php');
        return <<<AUTOLOAD
<?php

// autoload.php @generated by AlexeyKupershtokh\LazyApcClassLoader

namespace AlexeyKupershtokh\LazyApcClassLoader;
$filesAutoload
// create LazyApcClassLoader for classes autoloading
\$loader = new LazyApcClassLoader(
    $suffixLiteral,
    function () {
        return require_once __DIR__ . '/autoload-composer.php';
    }
);
\$loader->register();
return \$loader;
?>$lazyApcClassLoaderClass
AUTOLOAD;
    }

    protected function getFilesAutoload($vendorPath, $suffix)
    {
        $file = '';
        if (file_exists($vendorPath.'/composer/autoload_files.php')) {
            $file = <<<INCLUDE_FILES

// immediately require all type=files autoloads
\$includeFiles = require __DIR__ . '/composer/autoload_files.php';
foreach (\$includeFiles as \$file)
{
    composerRequireLazy$suffix(\$file);
}

function composerRequireLazy$suffix(\$file)
{
    require \$file;
}

INCLUDE_FILES;
        }
        return $file;
    }
}
